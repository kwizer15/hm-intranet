<?php

namespace JLM\OfficeBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * QuoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuoteRepository extends EntityRepository
{

	public function getTotal()
	{
		$qb = $this->createQueryBuilder('q')
		->select('COUNT(q)');
		
		return (int) $qb->getQuery()
		->getSingleScalarResult();
	}
	
	public function getLastNumber()
	{
		$date = new \DateTime;
		$year = $date->format('Y');
		$qb = $this->createQueryBuilder('q')
			->select('SUBSTRING(q.number,5) as num')
			->where('SUBSTRING(q.creation, 1, 4) = :year')
			->orderBy('q.number','DESC')
			->setMaxResults(1)
			->setParameter('year',$year);
		$result = $qb->getQuery()->getResult();
//		var_dump($result); exit;
		if (!$result)
			return 0;
		else
			return $result[0]['num'];
	}
	
	public function search($query)
	{
		$query = str_replace(array('-1','-2','-3','-4','-5'),'',$query);
		$qb = $this->createQueryBuilder('q')
//				->select('q,v')
//				->leftJoin('q.variants','v')
				->where('q.followerCp LIKE :query')
				->orWhere('q.number LIKE :query')
				->orWhere('q.trusteeName LIKE :query')
				->orWhere('q.trusteeAddress LIKE :query')
				->orWhere('q.doorCp LIKE :query')
				->orWhere('q.contactCp LIKE :query')
				->orWhere('q.followerCp LIKE :query')
				->orderBy('q.creation','DESC')
				->setParameter('query', '%'.$query.'%');
		
		return $qb->getQuery()->getResult();
	}

	public function getCountState($state)
	{
		if ($state == 1 || $state == 2)
			$state = array(1,2);
		elseif ($state == 3 || $state == 4)
			$state = array(3,4);
		else
			$state = array($state);
		$qb = $this->createQueryBuilder('q')
			->select('q,v')
			->leftJoin('q.variants','v')
		;
		$result = $qb->getQuery()->getResult();
		$count = 0;
		foreach ($result as $r)
			if (in_array($r->getState(),$state))
				$count++;
		return $count;
	}
	
	public function getByState($state,$limit,$offset)
	{
		if (isset($this->byState))
			return $this->byState;
		
		if ($state == 1 || $state == 2)
			$state = array(1,2);
		elseif ($state == 3 || $state == 4)
			$state = array(3,4);
		else
			$state = array($state);
		$qb = $this->createQueryBuilder('q')
		//		->select('q,v')
		//		->leftJoin('q.variants','v')
				->orderBy('q.number','desc')
		;
		$results = $qb->getQuery()->getResult();
		$quotes = array();
		foreach ($results as $key=>$r)
			if (in_array($r->getState(),$state))
				if ($offset)
				{
					unset($results[$key]);
					$offset--;
				}
				elseif (!$limit)
					unset($results[$key]);
				else 
					$limit--;
			else
				unset($results[$key]);
		$this->byState = $results;
		return $results;
	}

}