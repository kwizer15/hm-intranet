{% extends 'form_div_layout.html.twig' %}

{% block form_label %}
{% spaceless %}
	{% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' control-label')|trim}) %}
    {% if not compound %}
        {% set label_attr = label_attr|merge({'for': id}) %}
    {% endif %}
    {% if required %}
        {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
    {% endif %}
    {% if label is empty %}
        {% set label = name|humanize %}
    {% endif %}
    <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>{{ label|trans({}, translation_domain) }}</label>
{% endspaceless %}
{% endblock form_label %}

{% block form_widget_compound %}
{% spaceless %}
    <div {{ block('widget_container_attributes') }}>
        {% if form.parent is empty %}
        	{% if form_errors(form) %}
            <div class="alert">{{ form_errors(form) }}</div>
            {% endif %}
        {% endif %}
        {{ block('form_rows') }}
        {{ form_rest(form) }}
    </div>
{% endspaceless %}
{% endblock form_widget_compound %}


{% block form_row %}
{% spaceless %}
    {% set type = type|default('text') %}
	<div class="control-group{% if form_errors(form) %} error{% endif %}">
		{{ form_label(form, label|default(null)) }}
		<div class="controls">
            {{ form_widget(form) }}
            {% if form_errors(form) %}<span class="help-inline">{{ form_errors(form) }}</span>{% endif %}
        </div>
    </div>
{% endspaceless %}
{% endblock form_row %}

{% block collection_widget %}
{% spaceless %}

    {% if prototype is defined %}
        {% set attr = attr|merge({'data-prototype': form_row(prototype) }) %}
    {% endif %}
    <tbody {{ block('widget_container_attributes') }}>
		{{ block('form_rows') }}
    </tbody>
	{{ form_rest(form) }}
{% endspaceless %}
{% endblock collection_widget %}

{% block choice_widget_expanded %}
{% spaceless %}
{% form_theme form 'JLMModelBundle:Form:choices.html.twig' %}
    {% for child in form %}
        {% set attr = attr|merge({'class': attr.class|default('') ~ ' checkbox inline' }) %}
        <label {{ block('widget_container_attributes') }}>
            {{ form_widget(child) }}
            {{ form_label(child) }}
        </label>
        {% endfor %}
{% endspaceless %}
{% endblock choice_widget_expanded %}

{% block choice_widget_options %}
{% spaceless %}
    {% for group_label, choice in options %}
        {% if choice is iterable %}
            <optgroup label="{{ group_label|trans({}, translation_domain) }}">
                {% set options = choice %}
                {{ block('choice_widget_options') }}
            </optgroup>
        {% else %}
            <option value="{{ choice.value }}"{% if choice is selectedchoice(value) %} selected="selected"{% endif %}>{{ choice.label|trans({}, translation_domain) }}</option>
        {% endif %}
    {% endfor %}
{% endspaceless %}
{% endblock choice_widget_options %}

{% block money_widget %}
{% spaceless %}
	{% set attr = attr|merge({'class': attr.class|default('') ~ ' input-money' }) %}
    <div class="input-append">{{ block('form_widget_simple') }}<span class="add-on">€</span></div>
{% endspaceless %}
{% endblock money_widget %}

{% block search_widget %}
{% spaceless %}
    {% set type = type|default('search') %}
    {{ block('form_widget_simple') }}
{% endspaceless %}
{% endblock search_widget %}

{% block percent_widget %}
{% spaceless %}
    {% set type = type|default('text') %}
    <div class="input-append">{{ block('form_widget_simple') }}<span class="add-on">%</span></div>
{% endspaceless %}
{% endblock percent_widget %}

{% block email_widget %}
{% spaceless %}
	<div class="input-prepend">
<span class="add-on"><i class="icon-envelope"></i></span>{{ block('form_widget_simple') }}</div>
{% endspaceless %}
{% endblock email_widget %}

{% block button_attributes %}
{% spaceless %}
{% set attr = attr|merge({'class': attr.class|default('') ~ ' btn' }) %}
{{ parent() }}
{% endspaceless %}
{% endblock button_attributes %}

{# Personal Types #}
{# {% block city_select_widget %}
{% spaceless %}
{% set attr = attr|merge({'data-source':  path('autocomplete_city') }) %}
{% set attr = attr|merge({'class': attr.class|default('') ~ ' autocompletion' }) %}
{{ block('form_widget_simple') }}
{% endspaceless %}
{% endblock city_select_widget %}
#}
{% block city_select_javascript %}

    <script type="text/javascript">
        $field = $('#{{ id }}');

        var $configs = {{ configs|json_encode|raw }};

        $configs = $.extend($configs, {
        	minimumInputLength: 1,
        	ajax: {
        		url: "{{ path('jlm_model_citysearch_json') }}",
        		dataType: "json",
        		data: function (term, page) {
        			return {
        				q: term,
        				page_limit: 10
        			};
        		},
        		results: function (data, page) {
    	        	return {
    	           		results: data.cities
    	           	};
    	        }
        	},
        	{% if value is not empty %}
        	initSelection: function(element, callback) {
        		var id=$(element).val();
        		if (id!=="") {
        			$.ajax("{{ path('jlm_model_city_json') }}", {
        				data: {
        					id: {{ value }}
        				},
        				dataType: "json"
        			}).done(function(data) { callback(data); });
        		}
        	},
        	{% endif %}
	        formatResult: function (item) {
	        	return item.zip + " - " + item.name;
	        },
	
	        formatSelection: function (item) {
				return item.zip + " - " + item.name;
	        },
	        formatNoMatches: function(term) { return "Pas de résultat pour \"" + term + "\""; },
	        
	        formatSearching: function() { return "Recherche..."; }
        });

        $field.select2($configs);
    </script>
{% endblock %}

{% block trustee_select_javascript %}

    <script type="text/javascript">
        $field = $('#{{ id }}');

        var $configs = {{ configs|json_encode|raw }};

        $configs = $.extend($configs, {
        	minimumInputLength: 1,
        	ajax: {
        		url: "{{ path('jlm_model_trusteesearch_json') }}",
        		dataType: "json",
        		data: function (term, page) {
        			return {
        				q: term,
        				page_limit: 10
        			};
        		},
        		results: function (data, page) {
    	        	return {
    	           		results: data.entities
    	           	};
    	        }
        	},
        	{% if value is not empty %}
        	initSelection: function(element, callback) {
        		var id=$(element).val();
        		if (id!=="") {
        			$.ajax("{{ path('jlm_model_trustee_json') }}", {
        				data: {
        					id: {{ value }}
        				},
        				dataType: "json"
        			}).done(function(data) { callback(data); });
        		}
        	},
        	{% endif %}
	        formatResult: function (item) {
	        	return item.name;
	        },
	
	        formatSelection: function (item) {
				return item.name;
	        },
	        formatNoMatches: function(term) { return "Pas de résultat pour \"" + term + "\""; },
	        
	        formatSearching: function() { return "Recherche..."; }
        });

        $field.select2($configs);
    </script>
{% endblock %}

{% block site_select_widget %}
{% spaceless %}
{% set attr = attr|merge({'data-source':  path('autocomplete_site') }) %}
{% set attr = attr|merge({'class': attr.class|default('') ~ ' autocompletion' }) %}
{{ block('textarea_widget') }}
{% endspaceless %}
{% endblock site_select_widget %}

{% block contract_select_widget %}
{% spaceless %}
{% set attr = attr|merge({'data-source':  path('autocomplete_contract') }) %}
{% set attr = attr|merge({'class': attr.class|default('') ~ ' autocompletion' }) %}
{{ block('form_widget_simple') }}
{% endspaceless %}
{% endblock contract_select_widget %}

{% block person_select_widget %}
{% spaceless %}
{% set type = 'hidden' %}
{{ block('form_widget_simple') }}
<input type="text" id="{{ id }}_selector" class="autocompletion" data-source="{{ path('autocomplete_person') }}">
{% endspaceless %}
{% endblock person_select_widget %}



{% block distance_widget %}
{% spaceless %}
<div class="input-append">{{ block('field_widget') }}<span class="add-on">mm</span></div>
{% endspaceless %}
{% endblock distance_widget %}

{% block address_widget %}
{% spaceless %}
	  {{ form_widget(form.street) }}<br>
	  {{ form_widget(form.city) }}
	  {{ form_errors(form.street) }}
      {{ form_errors(form.city) }}
{% endspaceless %}
{% endblock address_widget %}

{% block datetime_widget %}
{% spaceless %}
    {% if widget == 'single_text' %}
        {{ block('form_widget_simple') }}
    {% else %}
        <div {{ block('widget_container_attributes') }}>
            {{ form_errors(form.date) }}
            {{ form_errors(form.time) }}
            {{ form_widget(form.date) }} à 
            {{ form_widget(form.time) }}
        </div>
    {% endif %}
{% endspaceless %}
{% endblock datetime_widget %}

{% block date_widget %}
{% spaceless %}
    {% if widget == 'single_text' %}
    	{% set attr = attr|merge({'class': attr.class|default('') ~ ' input-small datepicker' }) %}
        {{ block('form_widget_simple') }}
    {% else %}
        <div {{ block('widget_container_attributes') }}>
            {{ date_pattern|replace({
                '{{ year }}':  form_widget(form.year),
                '{{ month }}': form_widget(form.month),
                '{{ day }}':   form_widget(form.day),
            })|raw }}
        </div>
    {% endif %}
{% endspaceless %}
{% endblock date_widget %}

{% block time_widget %}
{% spaceless %}
    {% if widget == 'single_text' %}
        {{ block('form_widget_simple') }}
    {% else %}
            {{ form_widget(form.hour, { 'attr': { 'size': '1', 'class' : 'input-mini' } }) }} h {{ form_widget(form.minute, { 'attr': { 'size': '1', 'class' : 'input-mini' } }) }}{% if with_seconds %}:{{ form_widget(form.second, { 'attr': { 'size': '1' } }) }}{% endif %}
    {% endif %}
{% endspaceless %}
{% endblock time_widget %}

{% block jlm_default_search_widget %}
{{ form_widget(form.query) }}
{{ form_rest(form) }}
{% endblock %}
